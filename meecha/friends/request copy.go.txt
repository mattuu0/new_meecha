package friends

import (
	"errors"
	"log"
	_ "log"
	"meecha/auth"
	"meecha/database"
	"strconv"
	"time"
)

//フレンド申請送信
func Send(Sender_id string, Receiver_id string) (string, error){
	//senduid取得
	suid,err := auth.Genid()

	//センドトークンの情報
	Stoken := database.Sent{
		Sender_id:   Sender_id,        	//送った側のID
		Receiver_id: Receiver_id,		//受け取る側のID
		UID: 		 suid,				//uuid
		SendTime:    time.Now().Unix(),	//送った時間
	}

	//ネームトークンフィルター
	named_filter := database.Sent{}

	//自分にフレンドを送った場合
	if(Sender_id == Receiver_id) {
		return "",errors.New("entered_same_id")
	}

	//既に存在していたら1、存在していなかったら0を代入
	Sender   := dbconn.Where(database.Sent{Sender_id: Sender_id}).Where(database.Sent{Receiver_id: Receiver_id}).First(&named_filter).RowsAffected
	//既に存在していたら1、存在していなかったら0を代入(逆)
	Receiver := dbconn.Where(database.Sent{Sender_id: Receiver_id}).Where(database.Sent{Receiver_id: Sender_id}).First(&named_filter).RowsAffected

	//既に存在している場合
	if(Sender + Receiver != 0){
		return "",errors.New("request_is_already_existing")
	}

	//データベースに書き込む
	dbconn.Create(&Stoken)

	return suid,err
}

//受信済み取得
func Get_Received(Receiver_id string) (map[string]map[string]string, error){

	//ネームトークンフィルター
	var named_filter []database.Sent

	//受信側IDが同じ申請の配列を取得
	acquisition := dbconn.Where(database.Sent{Receiver_id: Receiver_id}).Find(&named_filter)
	//受信側が受信した要素の数を代入
	length := acquisition.RowsAffected

	//map宣言
	maps := map[string]map[string]string{}
	
	//受信した配列をすべてmapに代入
	for i := 0; i < int(length); i++ {
		maps[named_filter[i].UID] = map[string]string{
			"name":named_filter[i].Sender_id,					//送信した側の名前
			"time":strconv.Itoa(int(named_filter[i].SendTime)), //リクエストした時間
		}
	}
	
	//受信した配列の個数がが0の時
	if(length == 0){
		return map[string]map[string]string{},nil
	}
	
	return maps,nil
}


//送信済み取得
func Get_Sent(Sender_id string) (map[string]map[string]string, error){

	//ネームトークンフィルター
	var named_filter []database.Sent

	//送信側IDが同じ申請の配列を取得
	acquisition := dbconn.Where(database.Sent{Sender_id: Sender_id}).Find(&named_filter)
	//送信側が受信した要素の数を代入
	length := acquisition.RowsAffected

	//map宣言
	maps := map[string]map[string]string{}



	//送信した配列をすべてmapに代入
	for i := 0; i < int(length); i++ {
		maps[named_filter[i].UID] = map[string]string{
			"name":named_filter[i].Receiver_id,					//受信した側の名前
			"time":strconv.Itoa(int(named_filter[i].SendTime)), //リクエストした時間
		}
	}
	
	//送信した配列の個数がが0の時
	if(length == 0){
		return map[string]map[string]string{},nil
	}
	
	return maps,nil
}


//識別子で確認後、userを2人と識別子を返す
func Get_Request(UID string)(database.Sent,error) {

	//ネームトークンフィルター
	var named_filter database.Sent

	//識別子が存在しているか
	result := dbconn.Where(database.Sent{UID: UID}).First(&named_filter)

	//エラーならば0とエラー型を返す
	if  result.Error != nil{
		log.Println("0000")
	
		return named_filter,result.Error
	}

	return named_filter,nil
}


// //フレンドであることをDBに登録
func Record_Friends(named_filter database.Friends)(error){

	//フレンドUIDを取得
	fuid,err := auth.Genid()

	//フレンドトークンの情報
	Ftoken := database.Friends{
		UID: 		 fuid,								//uuid
		Sender_id:   named_filter.Sender_id,        	//送った側のID
		Receiver_id: named_filter.Receiver_id,		    //受け取る側のID
		SendTime:    time.Now().Unix(),	                //送った時間
	}


		//既に存在していたら1、存在していなかったら0を代入
		Sender   := dbconn.Where(database.Friends{Sender_id: named_filter.Sender_id}).Where(database.Sent{Receiver_id: named_filter.Receiver_id}).First(&named_filter).RowsAffected
		//既に存在していたら1、存在していなかったら0を代入(逆)
		Receiver := dbconn.Where(database.Friends{Sender_id: named_filter.Receiver_id}).Where(database.Sent{Receiver_id: named_filter.Sender_id}).First(&named_filter).RowsAffected
	
		//既に存在している場合
		if(Sender + Receiver != 0){
			return errors.New("already_friend_registered")
		}
	
		//データベースに書き込む
		dbconn.Create(&Ftoken)

	return err
}

//フレンドリクエストを消去
func Delete_Database(){

}
//承認
func Accept(Receiver_id string,UID string) (error){

	//リクエストが存在しているか
	named_filter,err := Get_Request(UID)

	Record_Friends(named_filter)
	if err != nil {	
		log.Println("eeeeeeeee")

		return nil
	}
	log.Println("wwwwwwww")
	log.Println(named)

	return nil
}