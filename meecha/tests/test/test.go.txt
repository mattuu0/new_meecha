package main

import (
	"log"
	"net/url"
	"strconv"

	"github.com/joho/godotenv"

	"meecha/auth"
	"meecha/database"
	"meecha/friends"

	"math/rand"

	"github.com/gorilla/websocket"

	"bufio"
	"fmt"
	"os"

	"time"
)

func loadEnv() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Fatal("Error loading .env file")
	}
}

type CommandMessage struct {
	//コマンド
	Command string

	//ペイロード
	Payload interface{}
}

type ResponseMessage struct {
	//コマンド
	Command string

	//ペイロード
	Payload interface{}
}

func random(min, max float64) float64 {
    rand.Seed(time.Now().UnixNano())
    return rand.Float64()*(max-min) + min
}

func main() {
	//環境変数読み込み
	loadEnv()

	log.Println(database.Init())

	auth.Init()
	friends.Init()

	scanner := bufio.NewScanner(os.Stdin)
	//1000000人のユーザを作成
	for i := 0; i < 101; i++ {
		if i%10 == 0 {
			scanner.Scan()
			log.Println(i)
			fmt.Println("wait key")
			scanner.Text()
		}

		go send_location(i)
	}
}

func send_location(loginid int) {
	log.Println(strconv.Itoa(loginid))

	user, err := auth.Login("test"+strconv.Itoa(loginid), "password")

	if err != nil {
		log.Println(err)
		return
	}

	wsurl := url.URL{Scheme: "wss", Host: "wao2server.tail6cf7b.ts.net", Path: "/meecha/ws"}
	log.Printf("connecting to %s", wsurl.String())

	wsconn, _, err := websocket.DefaultDialer.Dial(wsurl.String(), nil)

	if err != nil {
		log.Println(err)
		return
	}

	defer wsconn.Close()

	wsconn.WriteJSON(CommandMessage{Command: "auth", Payload: user.AccessToken})

	for {
		var recvmsg = ResponseMessage{}
		err = wsconn.ReadJSON(&recvmsg)

		if err != nil {
			log.Println("error : " + err.Error())
			wsconn.Close()
			return
		}

		switch recvmsg.Command {
		case "Location_Token":
			log.Println(loginid)
			send_data := CommandMessage{
				Command: "location",
				Payload: map[string]interface{}{
					"token": recvmsg.Payload.(string),
					"lat":   34.7088768 + random(-0.005, 0.005),
					"lng":   135.4969214  + random(-0.005, 0.005),
				},
			}

			err = wsconn.WriteJSON(send_data)

			if err != nil {
				log.Println("error : " + err.Error())
				wsconn.Close()
				return
			}

			break

		case "near_friend":
			log.Println(recvmsg.Payload)
			break
		}
	}
}
